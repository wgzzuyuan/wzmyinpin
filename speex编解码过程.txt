
编码过程
1、定义一个SpeexBits类型变量bits和一个Speex编码器状态变量enc_state。
2、调用speex_bits_init(&bits)初始化bits。
3、调用speex_encoder_init(&speex_nb_mode)来初始化enc_state。其中speex_nb_mode是SpeexMode类型的变量，表示的是窄带模式。还有speex_wb_mode表示宽带模式、speex_uwb_mode表示超宽带模式。
4、调用函数int speex_encoder_ ctl(void *state, int request, void *ptr)来设定编码器的参数，其中参数state表示编码器的状态；参数request表示要定义的参数类型，
   如SPEEX_ GET_ FRAME_SIZE表示设置帧大小，SPEEX_ SET_QUALITY表示量化大小，这决定了编码的质量；参数ptr表示要设定的值。
    可通过speex_encoder_ctl(enc_state, SPEEX_GET_FRAME_SIZE, &frame_size) 和speex_encoder_ctl(enc_state, SPEEX_SET_QUALITY, &quality)来设定编码器的参数。
5、初始化完毕后，对每一帧声音作如下处理：调用函数speex_bits_reset(&bits)再次设定SpeexBits，然后调用函数speex_encode(enc_state, input_frame, &bits)，参数bits中保存编码后的数据流。
6、编码结束后，调用函数speex_bits_destroy (&bits)， speex_encoder_destroy (enc_state)来



202210708
从实现的角度：
简单来说，直接调用库函数中的API，实现编解码。


基础知识： 
编码器的模式有几种？？？采用几种不同的模式分别表示什么物理意义？？？
窄带模式 ，宽带模式 ，超宽带模式 

编码器的状态？？？

帧大小 ？？？ 量化大小？？？  
以上2个参数决定了编码的质量.
speex_encoder_ ctl（）用这个函数实现编码的帧大小，量化大小




20210708   
Speex解码流程
1、 定义一个 SpeexBits 类型变量bits和一个Speex编码状态变量enc_state。
2、 调用speex_bits_init(&bits)初始化bits。
3、 调用speex_decoder_init (&speex_nb_mode)来初始化 enc_state。
4、 调用函数speex_decoder_ctl (void *state, int request, void *ptr)来设定编码器的参数。
5、 调用函数 speex_decode(void *state, SpeexBits *bits, float *out)对参数bits中的音频数据进行解编码，参数out中保存解码后的数据流。
6、 调用函数speex_bits_destroy(&bits), speex_ decoder_ destroy (void *state)来关闭和销毁 SpeexBits 和解码器。


编码和解码的实现都要定义 SpeexBits 和编码器状态变量，解码过程如下：
定义 SpeexBits 和编码器状态变量------初始化bits------初始化enc_state------设置编码器参数------对参数 bits 中的音频数据进行解码，并保存解码后的数据流------关闭和销毁SpeexBits 和解码器。





