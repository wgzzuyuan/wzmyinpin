

extern "C"
{
#include <libswscale/swscale.h>
#include <libavcodec/avcodec.h>
#include <libavcodec/version.h>
#include <libavformat/avformat.h>
#include <libswresample/swresample.h>
#include <libavutil/avutil.h>
#include<libavutil/pixfmt.h>
#include<libavutil/opt.h>
//#include <libavutil/opt.h>
//#include <libavutil/imgutils.h>

}
#include <opencv2/highgui/highgui.hpp>
#include<opencv2/core/core.hpp>
#include<opencv2/opencv.hpp>
#include <iostream>
#include<queue>
#include <sys/time.h>

using namespace std;
using namespace cv;
struct timeval starttime;
struct timeval endtime;
struct timeval starttime1;
struct timeval endtime1;


int main(int argc, char *argv[])
{
 
//nginx-rtmp 直播服务器rtmp推流URL
    char *outUrl = "rtmp://192.168.3.105:2019/live";

    //注册所有的编解码器
    avcodec_register_all();

    //注册所有的封装器
    av_register_all();

    //注册所有网络协议
    avformat_network_init();
	
	VideoCapture cam;
    Mat frame;
    namedWindow("video");

    //像素格式转换上下文
    SwsContext *vsc = NULL;

    //输出的数据结构
    AVFrame *yuv = NULL;

    //编码器上下文
    AVCodecContext *vc = NULL;

    //rtmp flv 封装器                                                           
    AVFormatContext *ic = NULL;
    /// 1 使用opencv打开rtsp相机
    cam.open(0); // 本地相机
	if (!cam.isOpened())
    {
            cout<<"camera is not open<<endl;";
    }
    int inWidth = cam.get(CAP_PROP_FRAME_WIDTH);
    int inHeight = cam.get(CAP_PROP_FRAME_HEIGHT);
    int fps = cam.get(CAP_PROP_FPS);
    fps = 25;
inWidth=640;
inHeight=480;
    ///2 初始化格式转换上下文
        vsc = sws_getCachedContext(vsc,
            inWidth, inHeight, AV_PIX_FMT_BGR24,     //源宽、高、像素格式
            inWidth, inHeight, AV_PIX_FMT_YUV420P,//目标宽、高、像素格式
            SWS_BICUBIC,  // 尺寸变化使用算法
            0, 0, 0
        );
        if (!vsc)
        {
           cout<<"sws_getCachedContext failed!"<<endl;;
        }
        ///3 初始化输出的数据结构
        yuv = av_frame_alloc();
        yuv->format = AV_PIX_FMT_YUV420P;
        yuv->width = inWidth;
        yuv->height = inHeight;
        yuv->pts = 0;
        //分配yuv空间
        int ret = av_frame_get_buffer(yuv, 32);
        if (ret != 0)
        {
            char buf[1024] = { 0 };
            av_strerror(ret, buf, sizeof(buf) - 1);
        }

        ///4 初始化编码上下文
        //a 找到编码器
        AVCodec *codec = avcodec_find_encoder(AV_CODEC_ID_H264);
        if (!codec)
        {
           cout<<"Can`t find h264 encoder!"<<endl;
        }
        //b 创建编码器上下文
        vc = avcodec_alloc_context3(codec);
        if (!vc)
        {
            cout<<"avcodec_alloc_context3 failed!"<<endl;
        }
        //c 配置编码器参数
        vc->flags |= AV_CODEC_FLAG_GLOBAL_HEADER; //全局参数
        vc->codec_id = codec->id;
        vc->thread_count = 8;

        vc->bit_rate = 50 * 1024 * 8;//压缩后每秒视频的bit位大小 50kB
        vc->width = inWidth;
        vc->height = inHeight;
        vc->time_base = { 1,fps };
        vc->framerate = { fps,1 };

        //画面组的大小，多少帧一个关键帧
        vc->gop_size = 250;
        vc->max_b_frames = 0;
        vc->pix_fmt = AV_PIX_FMT_YUV420P;
		av_opt_set(vc->priv_data, "preset", "superfast", 0); 
		av_opt_set(vc->priv_data, "tune", "zerolatency", 0);

        //d 打开编码器上下文
        ret = avcodec_open2(vc, 0, 0);
        if (ret != 0)
        {
            char buf[1024] = { 0 };
            av_strerror(ret, buf, sizeof(buf) - 1);
        }
        cout << "avcodec_open2 success!" << endl;

        ///5 输出封装器和视频流配置
        //a 创建输出封装器上下文
        ret = avformat_alloc_output_context2(&ic, 0, "flv", outUrl);
        if (ret != 0)
        {
            char buf[1024] = { 0 };
            av_strerror(ret, buf, sizeof(buf) - 1);
        }
        //b 添加视频流 
        AVStream *vs = avformat_new_stream(ic, NULL);
        if (!vs)
        {
            cout<<"avformat_new_stream failed"<<endl;
        }
       
        //从编码器复制参数
        avcodec_copy_context(vs->codec, vc);///-----
        vs->codec->codec_tag = 0;
		av_dump_format(ic, 0, outUrl, 1);

		
		
        ///打开rtmp 的网络输出IO
        ret = avio_open(&ic->pb, outUrl, AVIO_FLAG_WRITE);
        if (ret != 0)
        {
            char buf[1024] = { 0 };
            av_strerror(ret, buf, sizeof(buf) - 1);
        }

        //写入封装头
        ret = avformat_write_header(ic, NULL);
        if (ret != 0)
        {
            char buf[1024] = { 0 };
            av_strerror(ret, buf, sizeof(buf) - 1);
        }

        AVPacket pack;
        memset(&pack, 0, sizeof(pack));
        int vpts = 0;
        for (;;)
        {
 gettimeofday(&starttime,NULL);   
gettimeofday(&starttime1,NULL);         
///读取rtsp视频帧，解码视频帧
            if (!cam.grab())
            {
                continue;
            }
            ///yuv转换为rgb
            if (!cam.retrieve(frame))
            {
                continue;
            }
            waitKey(20);
gettimeofday(&endtime1,NULL);
				double timeuse1 = endtime1.tv_sec - starttime1.tv_sec + (endtime1.tv_usec - starttime1.tv_usec)/(double)1000000; 
cout<<"cap:"<<timeuse1<<endl;


            ///rgb to yuv
            //输入的数据结构
            uint8_t *indata[AV_NUM_DATA_POINTERS] = { 0 };

            indata[0] = frame.data;
            int insize[AV_NUM_DATA_POINTERS] = { 0 };
            //一行（宽）数据的字节数
            insize[0] = frame.cols * frame.elemSize();
            int h = sws_scale(vsc, indata, insize, 0, frame.rows, //源数据
                yuv->data, yuv->linesize);
            if (h <= 0)
            {
                continue;
            }
            ///h264编码
            yuv->pts = vpts;
            vpts++;
			int got_picture=0;
			avcodec_encode_video2(vc,&pack,yuv,&got_picture);
            if (ret != 0 || pack.size > 0)
            {
                cout << "*" << pack.size << flush;
            }
            else
            {
                cout<<"continue";
				continue;
            }
            //推流
            pack.pts = av_rescale_q(pack.pts, vc->time_base, vs->time_base);
            pack.dts = av_rescale_q(pack.dts, vc->time_base, vs->time_base);
            pack.duration = av_rescale_q(pack.duration, vc->time_base, vs->time_base);
            ret = av_interleaved_write_frame(ic, &pack);
            if (ret == 0)
            {
                cout << "#" << flush;
            }
			cout<<"okokokokok"<<endl;
gettimeofday(&endtime,NULL);
				double timeuse = endtime.tv_sec - starttime.tv_sec + (endtime.tv_usec - starttime.tv_usec)/(double)1000000; 
cout<<timeuse<<endl;
        }
    return 0;
}
